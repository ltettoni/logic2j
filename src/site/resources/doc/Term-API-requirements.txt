Requirements and wishlist for logic2j's API
-------------------------------------------

Easy to use
Compatible with CDI (Spring)



Instantiation:
--------------
Do not like:
  config files/resources (that's really old fashioned)
  direct instantation of an implementation
Does like:
  Builder pattern
  Fluent API
  CDI injection of properties






Parsing of terms:
-----------------
Features for converting things into Terms hierarchies:
1. Type conversion      (eg. BigDecimal to Long, StringBuilder to Struct, Java Collection to Prolog list)
2. Interpretation       (eg. "x" is an atom, "X" is a variable)
3. Operators            (eg. a:-b is ':-'(a,b), [a,b] is ".(a,.(b,[]))"
4. Normalization        (unique Variables, common subtrees factorized, etc)
5. Primitives           (eg. "true", "!" are actually not atoms but primitives)

From the most basic conversion to the most evolved

1.1 new Struct(functor, args...)
1.2 Struct.createPList()
1.3 Struct.valueOf(functor, args...)
2.  TermApi.valueOf(Object)
3.  TermUnmarshaller.unmarshall()





>>>> IDEAS AND WORK IN PROGRESS - THIS IS NOT A DOCUMENTATION! <<<<

UC 1: make sure term is fully ground (no more free Vars anywhere) and obtain resolved solution.

binding("X").isGround()
binding("X").isFullyGround()

binding("X").resolved()




UC 2: Obtain values from within a java primitive

OBSOLETE:
	void atom_length(VarBindings bindings, Term atom) {
	  bindings.binding(atom).resolved(Struct.class).ensureAtom().getName().length();
	}
	  
  
  @Primitive(name = ">")
  public void expression_greater_than(SolutionListener theListener, Bindings theBindings, Object t1, Object t2) {
    t1 = evaluateFunctor(theBindings, t1);
    t2 = evaluateFunctor(theBindings, t2);
    ...
  }

  protected Term evaluateFunctor(Bindings theBindings, Term theTerm) {
    Term b = theBindings.binding(theTerm).resolved();
    if (b instanceof Struct) {
      Struct s = (Struct)b;
      final PrimitiveInfo desc = struct.getPrimitiveInfo();
      if (desc == null || desc.getType() != PrimitiveType.FUNCTOR) {
        return null;
      }
      return desc.invokeFunctor(struct, theBindings);  
    }
    return null;
  }
  



