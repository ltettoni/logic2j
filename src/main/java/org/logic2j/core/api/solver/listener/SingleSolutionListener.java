/*
 * logic2j - "Bring Logic to your Java" - Copyright (C) 2011 Laurent.Tettoni@gmail.com
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.logic2j.core.api.solver.listener;

import org.logic2j.core.api.SolutionListener;
import org.logic2j.core.api.model.Continuation;
import org.logic2j.core.api.model.Solution;
import org.logic2j.core.api.model.term.TermApi;
import org.logic2j.core.api.model.term.Var;
import org.logic2j.core.api.monadic.PoV;

import java.util.IdentityHashMap;
import java.util.Map;

/**
 * A {@link SolutionListener} that will retain the first solution only; see subclasses for features. In any case, no more than 2 solutions
 * will be generated by the goal solver since this method will ensure to abort generation as soon as satisfied.
 */
public abstract class SingleSolutionListener implements SolutionListener {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SingleSolutionListener.class);

    private final int maxCount; // Maximal number of solutions to fetch

    private final Object term;


    /**
     * Current solution counter (number of times {@link #onSolution(PoV)} was called)
     */
    protected int counter;

    /**
     * Current solution, initialized within {@link #onSolution(PoV)}
     */
    private Solution solution;

    /**
     * Create a {@link SolutionListener} that will enumerate solutions up to theMaxCount before aborting by "user request". We will usually
     * supply 1 or 2, see derived classes.
     * 
     * @param term
     * @param theMaxCount The maximal number of solutions to ask the inference engine; specify 1 to only look for the first, irrelevant
     *            whether there might be others; specify 2 to if you want the first and make sure there are no others (the inference engine
     *            will try to continue after the first).
     */
    public SingleSolutionListener(Object term, int theMaxCount) {
        super();
        this.term = term;
        this.maxCount = theMaxCount;
        this.counter = 0;
        this.solution = null;
    }


    @Override
    public Continuation onSolution(PoV theReifier) {
        if (this.counter > 0) {
            // OOps, we already had solutions? This is not desired
            onSuperfluousSolution();
        }
        logger.debug(" >>>>>>>>> onSolution(), iter=#{}", this.counter);

        this.solution = new Solution(this.term, theReifier);
        this.counter++;
        return Continuation.requestContinuationWhen(this.counter < this.maxCount);
    }
    /**
     * Handle the case of more than one single solution detected.
     */
    protected abstract void onSuperfluousSolution();

    // ---------------------------------------------------------------------------
    // Accessors
    // ---------------------------------------------------------------------------

    /**
     * @return The number of solutions found
     */
    public int getNbSolutions() {
        return this.counter;
    }

    /**
     * @return the solution
     */
    public Solution getSolution() {
        return this.solution;
    }

}
